SELECT USER 
FROM DUAL;
--==>> SCOTT

--○ 기존 테이블 제거
DROP TABLE TBL_SCORE;
--==>> Table TBL_SCORE이(가) 삭제되었습니다.


--○ 실습 테이블 생성(TBL_SCORE)
CREATE TABLE TBL_SCORE
( SID NUMBER
, NAME VARCHAR2(30)
, KOR NUMBER(3)
, ENG NUMBER(3)
, MAT NUMBER(3)
);
--==>> Table TBL_SCORE이(가) 생성되었습니다.

--○ 제약조건 추가 (SID 컬럼에 PK 제약조건 추가)
ALTER TABLE TBL_SCORE
ADD CONSTRAINT SCORE_SID_PK PRIMARY KEY(SID);
--==>> Table TBL_SCORE이(가) 변경되었습니다.

--○ 제약조건 추가 (KOR, ENG, MAT 컬럼에 CK 제약조건 추가)
ALTER TABLE TBL_SCORE
ADD( CONSTRAINT SCORE_KOR_CK CHECK(KOR BETWEEN 0 AND 100)
   , CONSTRAINT SCORE_ENG_CK CHECK(ENG BETWEEN 0 AND 100)
   , CONSTRAINT SCORE_MAT_CK CHECK(MAT BETWEEN 0 AND 100) );
--==>> Table TBL_SCORE이(가) 변경되었습니다


INSERT INTO TBL_SCORE(SID, NAME, KOR, ENG, MAT) VALUES (SCORESEQ.NEXTVAL,'박원석', 80, 70, 85)
;

SELECT SID"번호", NAME"이름", KOR"국어", ENG"영어", MAT"수학",KOR+ENG+MAT "총점", (KOR+ENG+MAT)/ 3"평균" 
FROM TBL_SCORE
ORDER BY 1 ;


SELECT SID , NAME, KOR , ENG, MAT , KOR+ENG+MAT AS SUM, (KOR+ENG+MAT)/ 3 AS AVG FROM TBL_SCORE ORDER BY 1 
;

SELECT COUNT(*) AS COUNT FROM TBL_Score
;

SELECT *
FROM TBL_SCORE;


SELECT sid, NAME
FROM TBL_Score;

CREATE SEQUENCE SCORESEQ
NOCACHE;
--==>> Sequence SCORESEQ이(가) 생성되었습니다.

--○ 기존 시퀀스 제거
DROP SEQUENCE SCORESEQ;
--==>> Sequence SCORESEQ이(가) 삭제되었습니다.


--○ 시퀀스 생성
CREATE SEQUENCE SCORESEQ
NOCACHE;
--==>> Sequence SCORESEQ이(가) 생성되었습니다.


--○ 데이터베이스 액션 처리에 필요한 쿼리문 준비 

-- 1. 데이터 입력 쿼리문 구성
INSERT INTO TBL_SCORE(SID, NAME, KOR, ENG, MAT)
VALUES(SCORESEQ.NEXTVAL,'홍길동', 90, 80, 70);
--> 한 줄 구성
INSERT INTO TBL_SCORE(SID, NAME, KOR, ENG, MAT) VALUES(SCORESEQ.NEXTVAL,'홍길동', 90, 80, 70)
;
--==>> 1 행 이(가) 삽입되었습니다.

COMMIT;
--==>> 커밋 완료.


-- 2. 리스트 출력 쿼리문 구성(총점, 평균, 석차 포함)
SELECT SID, NAME, KOR, ENG, MAT
        , (KOR + ENG + MAT) AS TOT
        , (KOR + ENG + MAT) / 3 AS AVG
        , RANK() OVER(ORDER BY (KOR + ENG + MAT) DESC) AS RANK
FROM TBL_SCORE
ORDER BY SID ASC;
--> 한 줄 구성


SELECT SID, NAME, KOR, ENG, MAT, (KOR + ENG + MAT) AS TOT, (KOR + ENG + MAT) / 3 AS AVG, RANK() OVER(ORDER BY (KOR + ENG + MAT) DESC) AS RANK FROM TBL_SCORE ORDER BY SID ASC
;

--==>> 1	홍길동	90	80	70	240	80	1



-- 3. 인원수 조회 쿼리문 구성
SELECT COUNT(*) AS COUNT
FROM TBL_SCORE;
--> 한 줄 구성
SELECT COUNT(*) AS COUNT FROM TBL_SCORE;

--==>> 1

-- 4. 이름 검색 쿼리문 구성(총점, 평균, 석차 포함)

SELECT SID, NAME, KOR, ENG, MAT, TOT, AVG, RANK
FROM 
(
    SELECT SID, NAME, KOR, ENG, MAT
            , (KOR + ENG + MAT) AS TOT
            , (KOR + ENG + MAT) / 3 AS AVG
            , RANK() OVER(ORDER BY (KOR + ENG + MAT) DESC) AS RANK
    FROM TBL_SCORE
)
WHERE NAME LIKE '%길동';
--> 한 줄 구성
SELECT SID, NAME, KOR, ENG, MAT, TOT, AVG, RANK FROM (SELECT SID, NAME, KOR, ENG, MAT, (KOR + ENG + MAT) AS TOT, (KOR + ENG + MAT) / 3 AS AVG, RANK() OVER(ORDER BY (KOR + ENG + MAT) DESC) AS RANK FROM TBL_SCORE)WHERE NAME LIKE '%길동'
;


-- 5. 번호 검색 쿼리문 구성(총점, 평균, 석차포함)
SELECT SID, NAME, KOR, ENG, MAT, TOT, AVG, RANK
FROM 
(
    SELECT SID, NAME, KOR, ENG, MAT
            , (KOR + ENG + MAT) AS TOT
            , (KOR + ENG + MAT) / 3 AS AVG
            , RANK() OVER(ORDER BY (KOR + ENG + MAT) DESC) AS RANK
    FROM TBL_SCORE
)
WHERE SID = 1;
--> 한 줄 구성
SELECT SID, NAME, KOR, ENG, MAT, TOT, AVG, RANK FROM (SELECT SID, NAME, KOR, ENG, MAT, (KOR + ENG + MAT) AS TOT, (KOR + ENG + MAT) / 3 AS AVG, RANK() OVER(ORDER BY (KOR + ENG + MAT) DESC) AS RANK FROM TBL_SCORE) WHERE SID = 1
;

-- 6. 데이터 수정 쿼리문 구성
UPDATE TBL_SCORE
SET NAME = '고길동', KOR = 100, ENG = 100, MAT = 100
WHERE SID = 1;
--> 한 줄 구성
UPDATE TBL_SCORE SET NAME = '고길동', KOR = 100, ENG = 100, MAT = 100 WHERE SID = 1
;



--==>> 1 행 이(가) 업데이트되었습니다.

COMMIT;
--==>> 커밋 완료.


-- 7. 데이터 삭제 쿼리문 구성
DELETE
FROM TBL_SCORE
WHERE SID = 1;
--> 한 줄 구성
DELETE FROM TBL_SCORE WHERE SID= 1;

--==>> 1 행 이(가) 삭제되었습니다.

ROLLBACK;
--==>> 롤백 완료.
